//
//  DogsClient-DogsClientMocks.generated.swift
//  DogsClient
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import DogsClient
@testable import Mockingbird
import Combine
import Foundation
import Swift
import SwiftUI
import Swinject
import SwinjectAutoregistration
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked ApiMock
public final class ApiMockMock: DogsClient.ApiMock, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.ApiMock
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  public enum InitializerProxy {
    public static func initialize(`networkProvider`: DogsClient.NetworkProviderProtocol, __file: StaticString = #file, __line: UInt = #line) -> ApiMockMock {
      let mock: ApiMockMock = ApiMockMock(networkProvider: `networkProvider`)
      mock.mockingbirdContext.sourceLocation = SourceLocation(__file, __line)
      return mock
    }
  }

  // MARK: Mocked `get`(`endpoint`: DogsClient.Endpoint)
  public override func `get`(`endpoint`: DogsClient.Endpoint) async throws -> Data {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) async throws -> Data", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((Data).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) async throws -> Data { return try await mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () async throws -> Data { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`get`(endpoint: `endpoint`)
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Data = try await mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Data).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`(`endpoint`: @autoclosure () -> DogsClient.Endpoint) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> Data, Data> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> Data, Data>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) async throws -> Data", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((Data).self)))
  }

  // MARK: Mocked init(`networkProvider`: DogsClient.NetworkProviderProtocol)
  public required init(`networkProvider`: DogsClient.NetworkProviderProtocol) {
    super.init(networkProvider: `networkProvider`)
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`networkProvider`: @autoclosure () -> DogsClient.NetworkProviderProtocol) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked `get`<T>(`endpoint`: DogsClient.Endpoint)
  public override func `get`<T>(`endpoint`: DogsClient.Endpoint) async throws -> T where T: Swift.Decodable {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`<T>(`endpoint`: DogsClient.Endpoint) async throws -> T where T: Swift.Decodable", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((T).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) async throws -> T { return try await mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () async throws -> T { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`get`(endpoint: `endpoint`)
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: T = try await mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (T).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`<T>(`endpoint`: @autoclosure () -> DogsClient.Endpoint) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> T, T> where T: Swift.Decodable {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> T, T>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`<T>(`endpoint`: DogsClient.Endpoint) async throws -> T where T: Swift.Decodable", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((T).self)))
  }
}

/// Returns an abstract mock which should be initialized using `mock(ApiMock.self).initialize(â€¦)`.
public func mock(_ type: DogsClient.ApiMock.Type, file: StaticString = #file, line: UInt = #line) -> ApiMockMock.InitializerProxy.Type {
  return ApiMockMock.InitializerProxy.self
}

// MARK: - Mocked ApiProtocol
public final class ApiProtocolMock: DogsClient.ApiProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.ApiProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    ApiProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `get`(`endpoint`: DogsClient.Endpoint)
  public func `get`(`endpoint`: DogsClient.Endpoint) async throws -> Data {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) async throws -> Data", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((Data).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) async throws -> Data { return try await mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () async throws -> Data { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Data = try await mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Data).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`(`endpoint`: @autoclosure () -> DogsClient.Endpoint) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> Data, Data> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> Data, Data>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) async throws -> Data", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((Data).self)))
  }

  // MARK: Mocked `get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint)
  public func `get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint) async throws -> T {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint) async throws -> T", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((T).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) async throws -> T { return try await mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () async throws -> T { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: T = try await mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (T).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`<T: Swift.Decodable>(`endpoint`: @autoclosure () -> DogsClient.Endpoint) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> T, T> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> T, T>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint) async throws -> T", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((T).self)))
  }

  // MARK: Mocked init(`networkProvider`: DogsClient.NetworkProviderProtocol)
  public required init(`networkProvider`: DogsClient.NetworkProviderProtocol) {
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`networkProvider`: @autoclosure () -> DogsClient.NetworkProviderProtocol) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `ApiProtocol`.
public func mock(_ type: DogsClient.ApiProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> ApiProtocolMock {
  return ApiProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked Api
public final class ApiMock: DogsClient.Api, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.Api
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  public enum InitializerProxy {
    public static func initialize(`networkProvider`: DogsClient.NetworkProviderProtocol, __file: StaticString = #file, __line: UInt = #line) -> ApiMock {
      let mock: ApiMock = ApiMock(networkProvider: `networkProvider`)
      mock.mockingbirdContext.sourceLocation = SourceLocation(__file, __line)
      return mock
    }
  }

  // MARK: Mocked `get`(`endpoint`: DogsClient.Endpoint)
  public override func `get`(`endpoint`: DogsClient.Endpoint) async throws -> Data {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) async throws -> Data", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((Data).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) async throws -> Data { return try await mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () async throws -> Data { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`get`(endpoint: `endpoint`)
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Data = try await mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Data).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`(`endpoint`: @autoclosure () -> DogsClient.Endpoint) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> Data, Data> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> Data, Data>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) async throws -> Data", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((Data).self)))
  }

  // MARK: Mocked `get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint)
  public override func `get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint) async throws -> T {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint) async throws -> T", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((T).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) async throws -> T { return try await mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () async throws -> T { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`get`(endpoint: `endpoint`)
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: T = try await mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (T).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`<T: Swift.Decodable>(`endpoint`: @autoclosure () -> DogsClient.Endpoint) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> T, T> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (DogsClient.Endpoint) async throws -> T, T>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`<T: Swift.Decodable>(`endpoint`: DogsClient.Endpoint) async throws -> T", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((T).self)))
  }

  // MARK: Mocked init(`networkProvider`: DogsClient.NetworkProviderProtocol)
  public required init(`networkProvider`: DogsClient.NetworkProviderProtocol) {
    super.init(networkProvider: `networkProvider`)
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`networkProvider`: @autoclosure () -> DogsClient.NetworkProviderProtocol) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns an abstract mock which should be initialized using `mock(Api.self).initialize(â€¦)`.
public func mock(_ type: DogsClient.Api.Type, file: StaticString = #file, line: UInt = #line) -> ApiMock.InitializerProxy.Type {
  return ApiMock.InitializerProxy.self
}

// MARK: - Mocked BreedViewModelProtocol
public final class BreedViewModelProtocolMock<ModalRoute: DogsClient.Route>: Mockingbird.Mock where DogsClient.BreedRoute == ModalRoute {
  typealias MockingbirdSupertype = DogsClient.BreedViewModelProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["BreedViewModelProtocolMock<ModalRoute>", Swift.ObjectIdentifier(ModalRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

public enum BreedViewModelProtocol<ModalRoute: DogsClient.Route> {
}
@available(*, unavailable, message: "'BreedViewModelProtocol' inherits from the externally-defined type 'ObservableObject' which needs to be declared in a supporting source file")
public func mock<ModalRoute: DogsClient.Route>(_ type: BreedViewModelProtocol<ModalRoute>.Type, file: StaticString = #file, line: UInt = #line) -> BreedViewModelProtocolMock<ModalRoute> {
  fatalError()
}

// MARK: - Mocked BreedViewModel
public final class BreedViewModelMock: DogsClient.BreedViewModel, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.BreedViewModel
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  public enum InitializerProxy {
    public static func initialize(`breed`: String, `apiService`: DogsClient.ApiProtocol, __file: StaticString = #file, __line: UInt = #line) -> BreedViewModelMock {
      let mock: BreedViewModelMock = BreedViewModelMock(breed: `breed`, apiService: `apiService`)
      mock.mockingbirdContext.sourceLocation = SourceLocation(__file, __line)
      return mock
    }
  }

  // MARK: Mocked breed
  override public var `breed`: String {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "breed.getter", setterSelectorName: "breed.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> String { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as String }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`breed`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: String = mkbObject.`breed`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (String).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getBreed() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String, String> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> String, String>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "breed.getter", setterSelectorName: "breed.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((String).self)))
  }

  // MARK: Mocked images
  override public var `images`: [UIImage] {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "images.getter", setterSelectorName: "images.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier(([UIImage]).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> [UIImage] { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as [UIImage] }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`images`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: [UIImage] = mkbObject.`images`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([UIImage]).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
    set {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "images.setter", setterSelectorName: "images.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? ([UIImage]) -> Void { return mkbImpl(newValue) }
        if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
        if let mkbImpl = mkbImpl as? (Any?) -> Any { return Mockingbird.dynamicCast(mkbImpl(newValue as Any?)) as Void }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Void }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`images` = newValue
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Void = mkbObject.`images` = newValue
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getImages() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [UIImage], [UIImage]> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [UIImage], [UIImage]>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "images.getter", setterSelectorName: "images.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier(([UIImage]).self)))
  }

  public func setImages(_ newValue: @autoclosure () -> [UIImage]) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, ([UIImage]) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, ([UIImage]) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "images.setter", setterSelectorName: "images.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.resolve(newValue)], returnType: Swift.ObjectIdentifier(Void.self)))
  }

  // MARK: Mocked modalRoute
  override public var `modalRoute`: DogsClient.BreedRoute? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "modalRoute.getter", setterSelectorName: "modalRoute.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((DogsClient.BreedRoute?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> DogsClient.BreedRoute? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as DogsClient.BreedRoute? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`modalRoute`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: DogsClient.BreedRoute? = mkbObject.`modalRoute`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (DogsClient.BreedRoute?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
    set {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "modalRoute.setter", setterSelectorName: "modalRoute.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? (DogsClient.BreedRoute?) -> Void { return mkbImpl(newValue) }
        if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
        if let mkbImpl = mkbImpl as? (Any?) -> Any { return Mockingbird.dynamicCast(mkbImpl(newValue as Any?)) as Void }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Void }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`modalRoute` = newValue
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Void = mkbObject.`modalRoute` = newValue
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getModalRoute() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> DogsClient.BreedRoute?, DogsClient.BreedRoute?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> DogsClient.BreedRoute?, DogsClient.BreedRoute?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "modalRoute.getter", setterSelectorName: "modalRoute.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((DogsClient.BreedRoute?).self)))
  }

  public func setModalRoute(_ newValue: @autoclosure () -> DogsClient.BreedRoute?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (DogsClient.BreedRoute?) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (DogsClient.BreedRoute?) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "modalRoute.setter", setterSelectorName: "modalRoute.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.resolve(newValue)], returnType: Swift.ObjectIdentifier(Void.self)))
  }

  // MARK: Mocked `loadPictures`()
  public override func `loadPictures`() async throws -> Void {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`loadPictures`() async throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () async throws -> Void { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`loadPictures`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = try await mkbObject.`loadPictures`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `loadPictures`() async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`loadPictures`() async throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked init(`breed`: String, `apiService`: DogsClient.ApiProtocol)
  public required init(`breed`: String, `apiService`: DogsClient.ApiProtocol) {
    super.init(breed: `breed`, apiService: `apiService`)
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`breed`: String, `apiService`: DogsClient.ApiProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`breed`), Mockingbird.ArgumentMatcher(`apiService`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`breed`: @autoclosure () -> String, `apiService`: @autoclosure () -> DogsClient.ApiProtocol) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, DogsClient.ApiProtocol) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, DogsClient.ApiProtocol) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`breed`: String, `apiService`: DogsClient.ApiProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`breed`), Mockingbird.resolve(`apiService`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns an abstract mock which should be initialized using `mock(BreedViewModel.self).initialize(â€¦)`.
public func mock(_ type: DogsClient.BreedViewModel.Type, file: StaticString = #file, line: UInt = #line) -> BreedViewModelMock.InitializerProxy.Type {
  return BreedViewModelMock.InitializerProxy.self
}

// MARK: - Mocked Constants
public final class ConstantsMock: DogsClient.Constants, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.Constants
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    self.mockingbirdContext.sourceLocation = sourceLocation
    ConstantsMock.mockingbirdContext.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `Constants`.
public func mock(_ type: DogsClient.Constants.Type, file: StaticString = #file, line: UInt = #line) -> ConstantsMock {
  return ConstantsMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked DIContainer
public final class DIContainerMock: Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.DIContainer
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

@available(*, unavailable, message: "'DIContainer' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: DogsClient.DIContainer.Type, file: StaticString = #file, line: UInt = #line) -> DIContainerMock {
  fatalError()
}

// MARK: - Mocked DetailViewModelProtocol
public final class DetailViewModelProtocolMock: Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.DetailViewModelProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

@available(*, unavailable, message: "'DetailViewModelProtocol' inherits from the externally-defined type 'ObservableObject' which needs to be declared in a supporting source file")
public func mock(_ type: DogsClient.DetailViewModelProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> DetailViewModelProtocolMock {
  fatalError()
}

// MARK: - Mocked DetailViewModel
public final class DetailViewModelMock: DogsClient.DetailViewModel, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.DetailViewModel
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  public enum InitializerProxy {
    public static func initialize(`image`: UIImage, __file: StaticString = #file, __line: UInt = #line) -> DetailViewModelMock {
      let mock: DetailViewModelMock = DetailViewModelMock(image: `image`)
      mock.mockingbirdContext.sourceLocation = SourceLocation(__file, __line)
      return mock
    }
  }

  // MARK: Mocked image
  override public var `image`: UIImage {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "image.getter", setterSelectorName: "image.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((UIImage).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> UIImage { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as UIImage }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`image`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: UIImage = mkbObject.`image`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (UIImage).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
    set {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "image.setter", setterSelectorName: "image.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? (UIImage) -> Void { return mkbImpl(newValue) }
        if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
        if let mkbImpl = mkbImpl as? (Any?) -> Any { return Mockingbird.dynamicCast(mkbImpl(newValue as Any?)) as Void }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Void }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`image` = newValue
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Void = mkbObject.`image` = newValue
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getImage() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIImage, UIImage> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIImage, UIImage>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "image.getter", setterSelectorName: "image.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((UIImage).self)))
  }

  public func setImage(_ newValue: @autoclosure () -> UIImage) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIImage) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIImage) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "image.setter", setterSelectorName: "image.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.resolve(newValue)], returnType: Swift.ObjectIdentifier(Void.self)))
  }

  // MARK: Mocked init(`image`: UIImage)
  public required init(`image`: UIImage) {
    super.init(image: `image`)
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`image`: UIImage)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`image`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`image`: @autoclosure () -> UIImage) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIImage) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIImage) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`image`: UIImage)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`image`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns an abstract mock which should be initialized using `mock(DetailViewModel.self).initialize(â€¦)`.
public func mock(_ type: DogsClient.DetailViewModel.Type, file: StaticString = #file, line: UInt = #line) -> DetailViewModelMock.InitializerProxy.Type {
  return DetailViewModelMock.InitializerProxy.self
}

// MARK: - Mocked HomeRouterProtocol
public final class HomeRouterProtocolMock<NavigationRoute: DogsClient.Route, NavigationDestination: View>: DogsClient.HomeRouterProtocol, Mockingbird.Mock where DogsClient.HomeNavigationRoute == NavigationRoute {
  typealias MockingbirdSupertype = DogsClient.HomeRouterProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["HomeRouterProtocolMock<NavigationRoute, NavigationDestination>", Swift.ObjectIdentifier(NavigationDestination.self).debugDescription, Swift.ObjectIdentifier(NavigationRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    HomeRouterProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `destination`(for `route`: NavigationRoute?)
  public func `destination`(for `route`: NavigationRoute?) -> NavigationDestination {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`destination`(for `route`: NavigationRoute?) -> NavigationDestination", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`route`)], returnType: Swift.ObjectIdentifier((NavigationDestination).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (NavigationRoute?) -> NavigationDestination { return mkbImpl(`route`) }
      if let mkbImpl = mkbImpl as? () -> NavigationDestination { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object:
          break
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (NavigationDestination).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `destination`(for `route`: @autoclosure () -> NavigationRoute?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (NavigationRoute?) -> NavigationDestination, NavigationDestination> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (NavigationRoute?) -> NavigationDestination, NavigationDestination>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`destination`(for `route`: NavigationRoute?) -> NavigationDestination", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`route`)], returnType: Swift.ObjectIdentifier((NavigationDestination).self)))
  }
}

public enum HomeRouterProtocol<NavigationRoute: DogsClient.Route, NavigationDestination: View> {
}
/// Returns a concrete mock of `HomeRouterProtocol`.
public func mock<NavigationRoute: DogsClient.Route, NavigationDestination: View>(_ type: HomeRouterProtocol<NavigationRoute, NavigationDestination>.Type, file: StaticString = #file, line: UInt = #line) -> HomeRouterProtocolMock<NavigationRoute, NavigationDestination> {
  return HomeRouterProtocolMock<NavigationRoute, NavigationDestination>(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeViewModelProtocol
public final class HomeViewModelProtocolMock<NavigationRoute: DogsClient.Route>: Mockingbird.Mock where DogsClient.HomeNavigationRoute == NavigationRoute {
  typealias MockingbirdSupertype = DogsClient.HomeViewModelProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["HomeViewModelProtocolMock<NavigationRoute>", Swift.ObjectIdentifier(NavigationRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

public enum HomeViewModelProtocol<NavigationRoute: DogsClient.Route> {
}
@available(*, unavailable, message: "'HomeViewModelProtocol' inherits from the externally-defined type 'ObservableObject' which needs to be declared in a supporting source file")
public func mock<NavigationRoute: DogsClient.Route>(_ type: HomeViewModelProtocol<NavigationRoute>.Type, file: StaticString = #file, line: UInt = #line) -> HomeViewModelProtocolMock<NavigationRoute> {
  fatalError()
}

// MARK: - Mocked HomeViewModel
public final class HomeViewModelMock: DogsClient.HomeViewModel, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.HomeViewModel
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  public enum InitializerProxy {
    public static func initialize(`apiService`: DogsClient.ApiProtocol, __file: StaticString = #file, __line: UInt = #line) -> HomeViewModelMock {
      let mock: HomeViewModelMock = HomeViewModelMock(apiService: `apiService`)
      mock.mockingbirdContext.sourceLocation = SourceLocation(__file, __line)
      return mock
    }
  }

  // MARK: Mocked breeds
  override public var `breeds`: [String] {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "breeds.getter", setterSelectorName: "breeds.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier(([String]).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> [String] { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as [String] }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`breeds`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: [String] = mkbObject.`breeds`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([String]).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getBreeds() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [String], [String]> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [String], [String]>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "breeds.getter", setterSelectorName: "breeds.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier(([String]).self)))
  }

  // MARK: Mocked breedsWithSubBreeds
  override public var `breedsWithSubBreeds`: [DogsClient.Subbreed] {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "breedsWithSubBreeds.getter", setterSelectorName: "breedsWithSubBreeds.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier(([DogsClient.Subbreed]).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> [DogsClient.Subbreed] { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as [DogsClient.Subbreed] }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`breedsWithSubBreeds`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: [DogsClient.Subbreed] = mkbObject.`breedsWithSubBreeds`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([DogsClient.Subbreed]).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getBreedsWithSubBreeds() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [DogsClient.Subbreed], [DogsClient.Subbreed]> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> [DogsClient.Subbreed], [DogsClient.Subbreed]>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "breedsWithSubBreeds.getter", setterSelectorName: "breedsWithSubBreeds.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier(([DogsClient.Subbreed]).self)))
  }

  // MARK: Mocked navigationRoute
  override public var `navigationRoute`: DogsClient.HomeNavigationRoute? {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "navigationRoute.getter", setterSelectorName: "navigationRoute.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((DogsClient.HomeNavigationRoute?).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> DogsClient.HomeNavigationRoute? { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as DogsClient.HomeNavigationRoute? }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`navigationRoute`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: DogsClient.HomeNavigationRoute? = mkbObject.`navigationRoute`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (DogsClient.HomeNavigationRoute?).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
    set {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "navigationRoute.setter", setterSelectorName: "navigationRoute.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? (DogsClient.HomeNavigationRoute?) -> Void { return mkbImpl(newValue) }
        if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
        if let mkbImpl = mkbImpl as? (Any?) -> Any { return Mockingbird.dynamicCast(mkbImpl(newValue as Any?)) as Void }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Void }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`navigationRoute` = newValue
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Void = mkbObject.`navigationRoute` = newValue
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getNavigationRoute() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> DogsClient.HomeNavigationRoute?, DogsClient.HomeNavigationRoute?> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> DogsClient.HomeNavigationRoute?, DogsClient.HomeNavigationRoute?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "navigationRoute.getter", setterSelectorName: "navigationRoute.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((DogsClient.HomeNavigationRoute?).self)))
  }

  public func setNavigationRoute(_ newValue: @autoclosure () -> DogsClient.HomeNavigationRoute?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (DogsClient.HomeNavigationRoute?) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (DogsClient.HomeNavigationRoute?) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "navigationRoute.setter", setterSelectorName: "navigationRoute.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.resolve(newValue)], returnType: Swift.ObjectIdentifier(Void.self)))
  }

  // MARK: Mocked `loadPlainBreeds`()
  public override func `loadPlainBreeds`() async throws -> Void {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`loadPlainBreeds`() async throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () async throws -> Void { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`loadPlainBreeds`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = try await mkbObject.`loadPlainBreeds`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `loadPlainBreeds`() async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`loadPlainBreeds`() async throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked `loadWithSubBreeds`()
  public override func `loadWithSubBreeds`() async throws -> Void {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`loadWithSubBreeds`() async throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () async throws -> Void { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return try await super.`loadWithSubBreeds`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = try await mkbObject.`loadWithSubBreeds`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `loadWithSubBreeds`() async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`loadWithSubBreeds`() async throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked init(`apiService`: DogsClient.ApiProtocol)
  public required override init(`apiService`: DogsClient.ApiProtocol) {
    super.init(apiService: `apiService`)
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`apiService`: DogsClient.ApiProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`apiService`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`apiService`: @autoclosure () -> DogsClient.ApiProtocol) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.ApiProtocol) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.ApiProtocol) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`apiService`: DogsClient.ApiProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`apiService`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns an abstract mock which should be initialized using `mock(HomeViewModel.self).initialize(â€¦)`.
public func mock(_ type: DogsClient.HomeViewModel.Type, file: StaticString = #file, line: UInt = #line) -> HomeViewModelMock.InitializerProxy.Type {
  return HomeViewModelMock.InitializerProxy.self
}

// MARK: - Mocked ModalRouterProtocol
public final class ModalRouterProtocolMock<ModalRoute: DogsClient.Route, ModalDestination: View>: DogsClient.ModalRouterProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.ModalRouterProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["ModalRouterProtocolMock<ModalRoute, ModalDestination>", Swift.ObjectIdentifier(ModalDestination.self).debugDescription, Swift.ObjectIdentifier(ModalRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    ModalRouterProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `modal`(for `route`: ModalRoute?)
  public func `modal`(for `route`: ModalRoute?) -> ModalDestination {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`modal`(for `route`: ModalRoute?) -> ModalDestination", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`route`)], returnType: Swift.ObjectIdentifier((ModalDestination).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (ModalRoute?) -> ModalDestination { return mkbImpl(`route`) }
      if let mkbImpl = mkbImpl as? () -> ModalDestination { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object:
          break
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (ModalDestination).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `modal`(for `route`: @autoclosure () -> ModalRoute?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (ModalRoute?) -> ModalDestination, ModalDestination> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (ModalRoute?) -> ModalDestination, ModalDestination>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`modal`(for `route`: ModalRoute?) -> ModalDestination", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`route`)], returnType: Swift.ObjectIdentifier((ModalDestination).self)))
  }
}

public enum ModalRouterProtocol<ModalRoute: DogsClient.Route, ModalDestination: View> {
}
/// Returns a concrete mock of `ModalRouterProtocol`.
public func mock<ModalRoute: DogsClient.Route, ModalDestination: View>(_ type: ModalRouterProtocol<ModalRoute, ModalDestination>.Type, file: StaticString = #file, line: UInt = #line) -> ModalRouterProtocolMock<ModalRoute, ModalDestination> {
  return ModalRouterProtocolMock<ModalRoute, ModalDestination>(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ModalViewModelProtocol
public final class ModalViewModelProtocolMock<ModalRoute: DogsClient.Route>: Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.ModalViewModelProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["ModalViewModelProtocolMock<ModalRoute>", Swift.ObjectIdentifier(ModalRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

public enum ModalViewModelProtocol<ModalRoute: DogsClient.Route> {
}
@available(*, unavailable, message: "'ModalViewModelProtocol' inherits from the externally-defined type 'ObservableObject' which needs to be declared in a supporting source file")
public func mock<ModalRoute: DogsClient.Route>(_ type: ModalViewModelProtocol<ModalRoute>.Type, file: StaticString = #file, line: UInt = #line) -> ModalViewModelProtocolMock<ModalRoute> {
  fatalError()
}

// MARK: - Mocked NavigatingViewModelProtocol
public final class NavigatingViewModelProtocolMock<NavigationRoute: DogsClient.Route>: Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.NavigatingViewModelProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["NavigatingViewModelProtocolMock<NavigationRoute>", Swift.ObjectIdentifier(NavigationRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

public enum NavigatingViewModelProtocol<NavigationRoute: DogsClient.Route> {
}
@available(*, unavailable, message: "'NavigatingViewModelProtocol' inherits from the externally-defined type 'ObservableObject' which needs to be declared in a supporting source file")
public func mock<NavigationRoute: DogsClient.Route>(_ type: NavigatingViewModelProtocol<NavigationRoute>.Type, file: StaticString = #file, line: UInt = #line) -> NavigatingViewModelProtocolMock<NavigationRoute> {
  fatalError()
}

// MARK: - Mocked NavigationRouterProtocol
public final class NavigationRouterProtocolMock<NavigationRoute: DogsClient.Route, NavigationDestination: View>: DogsClient.NavigationRouterProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.NavigationRouterProtocol
  public static var mockingbirdContext: Mockingbird.Context { return mkbGenericStaticMockContext.resolve(["NavigationRouterProtocolMock<NavigationRoute, NavigationDestination>", Swift.ObjectIdentifier(NavigationDestination.self).debugDescription, Swift.ObjectIdentifier(NavigationRoute.self).debugDescription]) }
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    NavigationRouterProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `destination`(for `route`: NavigationRoute?)
  public func `destination`(for `route`: NavigationRoute?) -> NavigationDestination {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`destination`(for `route`: NavigationRoute?) -> NavigationDestination", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`route`)], returnType: Swift.ObjectIdentifier((NavigationDestination).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (NavigationRoute?) -> NavigationDestination { return mkbImpl(`route`) }
      if let mkbImpl = mkbImpl as? () -> NavigationDestination { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object:
          break
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (NavigationDestination).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `destination`(for `route`: @autoclosure () -> NavigationRoute?) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (NavigationRoute?) -> NavigationDestination, NavigationDestination> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (NavigationRoute?) -> NavigationDestination, NavigationDestination>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`destination`(for `route`: NavigationRoute?) -> NavigationDestination", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`route`)], returnType: Swift.ObjectIdentifier((NavigationDestination).self)))
  }
}

public enum NavigationRouterProtocol<NavigationRoute: DogsClient.Route, NavigationDestination: View> {
}
/// Returns a concrete mock of `NavigationRouterProtocol`.
public func mock<NavigationRoute: DogsClient.Route, NavigationDestination: View>(_ type: NavigationRouterProtocol<NavigationRoute, NavigationDestination>.Type, file: StaticString = #file, line: UInt = #line) -> NavigationRouterProtocolMock<NavigationRoute, NavigationDestination> {
  return NavigationRouterProtocolMock<NavigationRoute, NavigationDestination>(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked NetworkProviderProtocol
public final class NetworkProviderProtocolMock: DogsClient.NetworkProviderProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.NetworkProviderProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    NetworkProviderProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `data`(`from`: URL)
  public func `data`(`from`: URL) async throws -> (Data, URLResponse) {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`data`(`from`: URL) async throws -> (Data, URLResponse)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`from`)], returnType: Swift.ObjectIdentifier(((Data, URLResponse)).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (URL) async throws -> (Data, URLResponse) { return try await mkbImpl(`from`) }
      if let mkbImpl = mkbImpl as? () async throws -> (Data, URLResponse) { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: (Data, URLResponse) = try await mkbObject.`data`(from: `from`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ((Data, URLResponse)).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `data`(`from`: @autoclosure () -> URL) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (URL) async throws -> (Data, URLResponse), (Data, URLResponse)> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (URL) async throws -> (Data, URLResponse), (Data, URLResponse)>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`data`(`from`: URL) async throws -> (Data, URLResponse)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`from`)], returnType: Swift.ObjectIdentifier(((Data, URLResponse)).self)))
  }
}

/// Returns a concrete mock of `NetworkProviderProtocol`.
public func mock(_ type: DogsClient.NetworkProviderProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> NetworkProviderProtocolMock {
  return NetworkProviderProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked Registerer
public final class RegistererMock: DogsClient.Registerer, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.Registerer
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    self.mockingbirdContext.sourceLocation = sourceLocation
    RegistererMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `setup`()
  public override func `setup`() -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`setup`() -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return super.`setup`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`setup`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `setup`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`setup`() -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `Registerer`.
public func mock(_ type: DogsClient.Registerer.Type, file: StaticString = #file, line: UInt = #line) -> RegistererMock {
  return RegistererMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked Route
public final class RouteMock: Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.Route
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

public enum Route {
}
@available(*, unavailable, message: "'Route' inherits from the externally-defined type 'Identifiable' which needs to be declared in a supporting source file")
public func mock(_ type: Route.Type, file: StaticString = #file, line: UInt = #line) -> RouteMock {
  fatalError()
}

// MARK: - Mocked UITestingRegisterer
public final class UITestingRegistererMock: DogsClient.UITestingRegisterer, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.UITestingRegisterer
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    self.mockingbirdContext.sourceLocation = sourceLocation
    UITestingRegistererMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `setup`()
  public override func `setup`() -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`setup`() -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return super.`setup`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`setup`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `setup`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`setup`() -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `UITestingRegisterer`.
public func mock(_ type: DogsClient.UITestingRegisterer.Type, file: StaticString = #file, line: UInt = #line) -> UITestingRegistererMock {
  return UITestingRegistererMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ViewModelProtocol
public final class ViewModelProtocolMock: Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.ViewModelProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])
}

@available(*, unavailable, message: "'ViewModelProtocol' inherits from the externally-defined type 'ObservableObject' which needs to be declared in a supporting source file")
public func mock(_ type: DogsClient.ViewModelProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> ViewModelProtocolMock {
  fatalError()
}
