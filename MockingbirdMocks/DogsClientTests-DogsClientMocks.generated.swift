//
//  DogsClientTests-DogsClientMocks.generated.swift
//  DogsClient
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import DogsClient
@testable import Mockingbird
import Combine
import Foundation
import Swift
import SwiftUI
import Swinject
import SwinjectAutoregistration
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked ApiProtocol
public final class ApiProtocolMock: DogsClient.ApiProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.ApiProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    ApiProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `get`(`endpoint`: DogsClient.Endpoint)
  public func `get`(`endpoint`: DogsClient.Endpoint) -> AnyPublisher<Data, URLError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) -> AnyPublisher<Data, URLError>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`endpoint`)], returnType: Swift.ObjectIdentifier((AnyPublisher<Data, URLError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (DogsClient.Endpoint) -> AnyPublisher<Data, URLError> { return mkbImpl(`endpoint`) }
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Data, URLError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Data, URLError> = mkbObject.`get`(endpoint: `endpoint`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Data, URLError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `get`(`endpoint`: @autoclosure () -> DogsClient.Endpoint) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.Endpoint) -> AnyPublisher<Data, URLError>, AnyPublisher<Data, URLError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.Endpoint) -> AnyPublisher<Data, URLError>, AnyPublisher<Data, URLError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`get`(`endpoint`: DogsClient.Endpoint) -> AnyPublisher<Data, URLError>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`endpoint`)], returnType: Swift.ObjectIdentifier((AnyPublisher<Data, URLError>).self)))
  }

  // MARK: Mocked init(`networkProvider`: DogsClient.NetworkProviderProtocol)
  public required init(`networkProvider`: DogsClient.NetworkProviderProtocol) {
    self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  public func initialize(`networkProvider`: @autoclosure () -> DogsClient.NetworkProviderProtocol) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (DogsClient.NetworkProviderProtocol) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "init(`networkProvider`: DogsClient.NetworkProviderProtocol)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`networkProvider`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `ApiProtocol`.
public func mock(_ type: DogsClient.ApiProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> ApiProtocolMock {
  return ApiProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked NetworkProviderProtocol
public final class NetworkProviderProtocolMock: DogsClient.NetworkProviderProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.NetworkProviderProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    NetworkProviderProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `dataPublisher`(`for`: URL)
  public func `dataPublisher`(`for`: URL) -> AnyPublisher<Data, URLError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`dataPublisher`(`for`: URL) -> AnyPublisher<Data, URLError>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`for`)], returnType: Swift.ObjectIdentifier((AnyPublisher<Data, URLError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (URL) -> AnyPublisher<Data, URLError> { return mkbImpl(`for`) }
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Data, URLError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Data, URLError> = mkbObject.`dataPublisher`(for: `for`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Data, URLError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `dataPublisher`(`for`: @autoclosure () -> URL) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (URL) -> AnyPublisher<Data, URLError>, AnyPublisher<Data, URLError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (URL) -> AnyPublisher<Data, URLError>, AnyPublisher<Data, URLError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`dataPublisher`(`for`: URL) -> AnyPublisher<Data, URLError>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`for`)], returnType: Swift.ObjectIdentifier((AnyPublisher<Data, URLError>).self)))
  }
}

/// Returns a concrete mock of `NetworkProviderProtocol`.
public func mock(_ type: DogsClient.NetworkProviderProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> NetworkProviderProtocolMock {
  return NetworkProviderProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
