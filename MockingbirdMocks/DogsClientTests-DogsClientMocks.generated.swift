//
//  DogsClientTests-DogsClientMocks.generated.swift
//  DogsClient
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import DogsClient
@testable import Mockingbird
import Combine
import Foundation
import Swift
import SwiftUI
import Swinject
import SwinjectAutoregistration
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked NetworkProviderProtocol
public final class NetworkProviderProtocolMock: DogsClient.NetworkProviderProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = DogsClient.NetworkProviderProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "DogsClient"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    NetworkProviderProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `data`(`from`: URL)
  public func `data`(`from`: URL) async throws -> (Data, URLResponse) {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`data`(`from`: URL) async throws -> (Data, URLResponse)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`from`)], returnType: Swift.ObjectIdentifier(((Data, URLResponse)).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (URL) async throws -> (Data, URLResponse) { return try await mkbImpl(`from`) }
      if let mkbImpl = mkbImpl as? () async throws -> (Data, URLResponse) { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: (Data, URLResponse) = try await mkbObject.`data`(from: `from`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ((Data, URLResponse)).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `data`(`from`: @autoclosure () -> URL) async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (URL) async throws -> (Data, URLResponse), (Data, URLResponse)> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, (URL) async throws -> (Data, URLResponse), (Data, URLResponse)>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`data`(`from`: URL) async throws -> (Data, URLResponse)", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`from`)], returnType: Swift.ObjectIdentifier(((Data, URLResponse)).self)))
  }
}

/// Returns a concrete mock of `NetworkProviderProtocol`.
public func mock(_ type: DogsClient.NetworkProviderProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> NetworkProviderProtocolMock {
  return NetworkProviderProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
